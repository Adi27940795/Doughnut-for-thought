# <YourRepository>/custom/events/JobFinished/AutoPublishTo2dview.py

import sys
import os
import subprocess
import re # For potentially more robust path/frame parsing

# --- Configuration ---
# *** Replace with the actual path to the 2dview command-line tool ***
TWODVIEW_CLI_PATH = '/path/to/your/2dview/cli/executable'
# *** Replace with the actual path to deadlinecommand if not in system PATH ***
DEADLINE_COMMAND_PATH = 'deadlinecommand' # Or specify full path

# --- Helper Functions for Deadline Interaction ---
# IMPORTANT: Using deadlinecommand is one way. If Deadline's Event Plugin API
# provides direct Python objects/functions to get job info, that's usually
# more efficient and robust. CONSULT DEADLINE DOCUMENTATION for event scripting.

def get_deadline_job_info(job_id, property_name):
    """Gets a standard job property using deadlinecommand."""
    try:
        cmd = [DEADLINE_COMMAND_PATH, '-GetJob', job_id, property_name]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, encoding='utf-8')
        return result.stdout.strip()
    except FileNotFoundError:
        print(f"Error: '{DEADLINE_COMMAND_PATH}' not found. Is it in the system PATH?")
        return None
    except subprocess.CalledProcessError as e:
        print(f"Error getting Deadline job info '{property_name}' for job {job_id}: {e.stderr}")
        return None
    except Exception as e:
        print(f"Unexpected error getting Deadline job info '{property_name}': {e}")
        return None

def get_deadline_job_extra_info(job_id, key_name):
    """Gets a specific Extra Info Key=Value using deadlinecommand."""
    full_key = f'ExtraInfoKeyValue{key_name}'
    try:
        # Note: GetJobProperty returns "Key=Value" or just "Key=" if empty
        cmd = [DEADLINE_COMMAND_PATH, '-GetJobProperty', job_id, full_key]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, encoding='utf-8')
        output = result.stdout.strip()
        # Check if the key exists and has a value
        if output.startswith(f'{key_name}='):
            return output[len(key_name)+1:] # Return everything after 'Key='
        else:
            # Key might exist but be empty, or not exist at all.
            # Check if the key itself was returned (meaning it exists but is empty)
            if output == key_name:
                 return "" # Key exists but is empty
            else:
                 print(f"Info: Extra Info Key '{key_name}' not found or has unexpected format for job {job_id}.")
                 return None # Key does not exist
    except FileNotFoundError:
        print(f"Error: '{DEADLINE_COMMAND_PATH}' not found. Is it in the system PATH?")
        return None
    except subprocess.CalledProcessError as e:
        # Command fails if the property doesn't exist at all
        print(f"Info: Extra Info Key '{key_name}' likely not set for job {job_id}. Error: {e.stderr.strip()}")
        return None
    except Exception as e:
        print(f"Unexpected error getting Deadline job extra info '{key_name}': {e}")
        return None

# --- Core Publishing Logic ---

def publish_to_2dview(publish_data):
    """
    Executes the 2dview publishing action.
    *** MODIFY THIS FUNCTION BASED ON 2dview's ACTUAL API ***
    """
    print(f"Attempting to publish to 2dview with data: {publish_data}")

    # --- Using 2dview Command Line Interface (Primary Example) ---
    try:
        if not os.path.exists(TWODVIEW_CLI_PATH):
            print(f"Error: 2dview executable not found at '{TWODVIEW_CLI_PATH}'")
            return False

        # *** CONSTRUCT THE COMMAND BASED ON 2dview's DOCUMENTATION ***
        cmd = [
            TWODVIEW_CLI_PATH,
            '--publish', # Hypothetical flag
            '--project', publish_data['project'],
            '--task', publish_data['task_id'],
            '--asset', publish_data['asset_name'],
            '--comment', publish_data['comment'],
            '--sequence-path', publish_data['render_path'], # Assumes 2dview understands #### or %04d
            '--start-frame', str(publish_data['first_frame']),
            '--end-frame', str(publish_data['last_frame'])
            # Add any other required flags like --user, --version, etc.
        ]
        print(f"Running command: {' '.join(cmd)}") # Use shlex.join(cmd) in Python 3.8+ for safer logging
        result = subprocess.run(cmd, check=True, capture_output=True, text=True, encoding='utf-8')
        print("2dview CLI Success Output:", result.stdout)
        return True

    except subprocess.CalledProcessError as e:
        print(f"Error calling 2dview CLI for job {publish_data.get('job_id', 'N/A')}: {e}")
        print("Stderr:", e.stderr)
        return False
    except Exception as e:
        print(f"An unexpected error occurred during 2dview CLI interaction for job {publish_data.get('job_id', 'N/A')}: {e}")
        return False

    # --- Alternative: Using 2dview Python API (Commented Out) ---
    # try:
    #     import twodview_api # Hypothetical module
    #     # Ensure this module and dependencies are in Python path where script runs
    #     print("Connecting to 2dview API...")
    #     # client = twodview_api.connect(...) # Add connection logic if needed
    #     result = twodview_api.publish_sequence( # Replace with actual function call
    #         project=publish_data['project'],
    #         task=publish_data['task_id'],
    #         asset=publish_data['asset_name'],
    #         comment=publish_data['comment'],
    #         path=publish_data['render_path'],
    #         start=publish_data['first_frame'],
    #         end=publish_data['last_frame']
    #     )
    #     print(f"2dview Python API Success: {result}")
    #     return True
    # except ImportError:
    #     print("Error: 'twodview_api' module not found.")
    #     return False
    # except Exception as e:
    #     print(f"Error interacting with 2dview Python API: {e}")
    #     return False

    # --- Alternative: Using 2dview REST API (Commented Out) ---
    # try:
    #     import requests
    #     import json
    #     api_url = 'http://2dview-server/api/v1/publish' # *** Replace with actual URL ***
    #     headers = {'Authorization': 'Bearer YOUR_API_KEY'} # *** Handle secrets securely! ***
    #     payload = { # *** Adjust payload structure based on 2dview API docs ***
    #         'project': publish_data['project'],
    #         'taskId': publish_data['task_id'],
    #         'assetName': publish_data['asset_name'],
    #         'comment': publish_data['comment'],
    #         'filePath': publish_data['render_path'],
    #         'startFrame': publish_data['first_frame'],
    #         'endFrame': publish_data['last_frame']
    #     }
    #     print(f"Posting to 2dview REST API: {api_url}")
    #     response = requests.post(api_url, headers=headers, json=payload, timeout=30) # Add timeout
    #     response.raise_for_status() # Raises HTTPError for bad responses (4xx or 5xx)
    #     print(f"2dview REST API Success: {response.json()}")
    #     return True
    # except ImportError:
    #     print("Error: 'requests' module not found. Please install it.")
    #     return False
    # except requests.exceptions.RequestException as e:
    #     print(f"Error calling 2dview REST API: {e}")
    #     if e.response is not None:
    #         print(f"Response status: {e.response.status_code}")
    #         print(f"Response body: {e.response.text}")
    #     return False
    # except Exception as e:
    #     print(f"An unexpected error occurred during 2dview REST API interaction: {e}")
    #     return False


# --- Main Event Script Logic ---
def __main__(*args):
    """Main function executed by Deadline Event Plugin system."""
    print(f"--- AutoPublishTo2dview Event Script Started ({__file__}) ---")

    # Get Job ID - This depends on how Deadline passes context to event scripts.
    # Consult Deadline docs. It might be an argument, or available via a global object.
    job_id = None
    job = None # Placeholder for potential Job object from Deadline API

    # --- Try common ways to get the Job/Job ID ---
    # Method 1: Deadline's internal scripting API (Preferred if available)
    try:
        # This is HYPOTHETICAL - Check Deadline.Scripting documentation
        from Deadline.Scripting import GetJob # Or DeadlineScripting, Deadline.Events, etc.
        job = GetJob() # Or GetJob(args[0]) if ID is passed
        if job:
            job_id = job.JobId
            print(f"Retrieved Job object via Deadline API for Job ID: {job_id}")
    except ImportError:
        print("Info: Deadline.Scripting API not found or GetJob function unavailable.")
    except Exception as e:
        print(f"Error using Deadline API to get Job object: {e}")

    # Method 2: Check arguments passed to the script (Less common for JobFinished)
    if not job_id and len(args) > 0:
        # Check if the first argument looks like a Job ID (typically alphanumeric)
        if isinstance(args[0], str) and len(args[0]) > 10: # Basic heuristic
             job_id = args[0]
             print(f"Assuming Job ID from script arguments: {job_id}")

    if not job_id:
         print("Error: Could not determine Job ID. Cannot proceed.")
         print("--- AutoPublishTo2dview Event Script Finished (Error) ---")
         return

    print(f"Processing Job ID: {job_id}")

    # Check job status - Only proceed if completed successfully
    # Use the Job object if available (more efficient), otherwise fallback to deadlinecommand
    job_status = None
    if job and hasattr(job, 'JobStatus'):
        job_status = job.JobStatus
    else:
        job_status = get_deadline_job_info(job_id, 'JobStatus')

    if job_status != 'Completed':
        print(f"Job {job_id} status is '{job_status}'. Skipping publish.")
        print("--- AutoPublishTo2dview Event Script Finished (Skipped) ---")
        return

    # --- Gather Information ---
    print("Job completed. Gathering information for publishing...")

    # Get render output paths and frames
    # Prefer Job object properties if available
    output_dirs_str = job.JobOutputDirectories if job and hasattr(job, 'JobOutputDirectories') else get_deadline_job_info(job_id, 'JobOutputDirectories')
    output_files_str = job.JobOutputFileNames if job and hasattr(job, 'JobOutputFileNames') else get_deadline_job_info(job_id, 'JobOutputFileNames')
    frames_str = job.JobFrames if job and hasattr(job, 'JobFrames') else get_deadline_job_info(job_id, 'JobFrames')

    # Basic validation
    if not output_dirs_str or not output_files_str or not frames_str:
        print("Error: Could not retrieve necessary job output information (Directories, Filenames, Frames).")
        print("--- AutoPublishTo2dview Event Script Finished (Error) ---")
        return

    # --- Parse Information (Handle potential multiple outputs carefully) ---
    # Assuming the FIRST output path is the relevant one for publishing.
    # Production pipelines often need more robust logic here.
    render_dir = output_dirs_str.split(';')[0].strip()
    render_file_pattern = output_files_str.split(';')[0].strip()

    if not render_dir or not render_file_pattern:
         print("Error: Could not parse render directory or file pattern.")
         print("--- AutoPublishTo2dview Event Script Finished (Error) ---")
         return

    # Construct full path, normalize slashes
    render_path = os.path.join(render_dir, render_file_pattern).replace('\\', '/')
    print(f"Parsed Render Path: {render_path}")

    # Parse frame range
    try:
        # Handle simple ranges like "1001-1050", potential single frames "1001"
        if '-' in frames_str:
            start_frame_str, end_frame_str = frames_str.split('-', 1)
            start_frame = int(start_frame_str)
            end_frame = int(end_frame_str)
        else:
            start_frame = int(frames_str)
            end_frame = start_frame
        print(f"Parsed Frame Range: {start_frame}-{end_frame}")
    except ValueError:
        print(f"Error: Could not parse frame range string '{frames_str}'.")
        print("--- AutoPublishTo2dview Event Script Finished (Error) ---")
        return

    # --- Get Metadata from Job Extra Info ---
    print("Retrieving metadata from Job Extra Info...")
    view_project = get_deadline_job_extra_info(job_id, 'ViewProject')
    view_task_id = get_deadline_job_extra_info(job_id, 'ViewTaskID')
    view_asset_name = get_deadline_job_extra_info(job_id, 'ViewAssetName')
    view_comment = get_deadline_job_extra_info(job_id, 'ViewPublishComment') or f"Auto-published from Deadline job {job_id}" # Default comment

    # Validate required metadata
    if view_project is None or view_task_id is None or view_asset_name is None:
         print("Error: Missing one or more required metadata keys (ViewProject, ViewTaskID, ViewAssetName) in Job Extra Info. Cannot publish.")
         print("--- AutoPublishTo2dview Event Script Finished (Error) ---")
         return

    print(f"Metadata Retrieved: Project='{view_project}', Task='{view_task_id}', Asset='{view_asset_name}'")

    # --- Prepare and Publish ---
    publish_data = {
        'job_id': job_id,
        'project': view_project,
        'task_id': view_task_id,
        'asset_name': view_asset_name,
        'comment': view_comment,
        'render_path': render_path, # Ensure this path is accessible/correct for 2dview
        'first_frame': start_frame,
        'last_frame': end_frame,
    }

    success = publish_to_2dview(publish_data)

    if success:
        print(f"Successfully initiated publish to 2dview for job {job_id}.")
        print("--- AutoPublishTo2dview Event Script Finished (Success) ---")
    else:
        print(f"Failed to publish to 2dview for job {job_id}.")
        print("--- AutoPublishTo2dview Event Script Finished (Failure) ---")


# --- Standard Entry Point ---
if __name__ == "__main__":
    # Pass along any arguments Deadline might provide to the script
    __main__(*sys.argv[1:])
